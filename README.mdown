#**Dorothy**
Another branch of Cocos2d-x with Lua derived from Cocos2d-x version 2.1rc0. Its target is to make a much easier framework for building a game. This branch provides simpler API interfaces, removes unnecessary features, addes features, improves the Lua binding codes and fixes Cocos2d-x bugs.

##**Features**

###**Removal**
* Cocos2d-x as pure graphic engine (Remove lots of extensions)
* Box2D as physics engine (Remove chipmunk)
* Lua as script engine (Remove Javascript)
* Only bind necessary APIs to Lua (Don`t need every detail from C++)

###**Added**
* Physics world, nodes and sensors that simplify the use of Box2D.
* Skeleton animation with smooth transition for changing of two animations.
* Animation editor which is simple enough to make skeleton animations and is written purely with the framework itself.
* A platform game (Mario like game) framework with features of character, bullet, action, behavier tree, layer management and camera. And it can be used for other kinds of games as well.
* Improved Zerobrane Studio with much more powerful code autocompletion abilities. All framework APIs is supported.

###**Enhance**
* C++ object\`s life circle is auto managed while writting in Lua codes. (No manually calling `retain()` or `release()` is needed for memory management).
* Improved Lua type systems with lower cost.
* Small optimizations for Lua binding to run faster.

###**Issues**###
* When using callbacks that call Lua functions from C++, cicular references may appear. For example:

```lua
	local layer = CCLayer()
    layer:registerTouchHandler(
    	function(eventType) -- layer references closure to invoke it
    		if eventType == CCTouch.Began then
    			layer.opacity = 1.0 -- closure references layer to access it
    		elseif eventType == CCTouch.Ended then
    			layer:runAction(oOpacity(0.3,0))
    		end
	    end)

	-- Currently in the implementation, the Lua GC system can`t detect 
	-- this kind of cicular reference. When you are done with the layer.
	-- You should call layer:unregisterTouchHandler() manually to avoid 
	-- memory leak.
``` 

Now the problem is temporarily solved by `CCNode.cleanup` method which removes all the Lua objects(callback functions, peer table) referenced by C++ object. And `node:removeChild(child)` method which calls the cleanup functions for all of the removed subtree children, but `node:removeChild(child, false)`
won`t call these cleanup functions.

##**Lisence**##
MIT